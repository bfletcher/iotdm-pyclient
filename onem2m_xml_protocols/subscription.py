#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Feb  1 17:29:02 2016 by generateDS.py version 2.18a.
#
# Command line options:
#   ('-o', 'subscription.py')
#
# Command line arguments:
#   shortName-XSD-v2_3_0/CDT-subscription-v2_3_0.xsd
#
# Command line:
#   generateDS.py -o "subscription.py" shortName-XSD-v2_3_0/CDT-subscription-v2_3_0.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.18a0
#

import sys
import json
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_
from onem2m_xml_protocols.common import announceableResource


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class sub(announceableResource):
    subclass = None
    superclass = None
    def __init__(self, enc=None, exc=None, nu=None, gpi=None, nfu=None, bn=None, rl=None, psn=None, pn=None, nsp=None, ln=None, nct=None, nec=None, cr=None, su=None, ch=None, sch=None):
        self.original_tagname_ = None
        self.enc = enc
        self.exc = exc
        self.nu = nu
        self.gpi = gpi
        self.nfu = nfu
        self.bn = bn
        self.rl = rl
        self.psn = psn
        self.pn = pn
        self.nsp = nsp
        self.ln = ln
        self.nct = nct
        self.nec = nec
        self.cr = cr
        self.su = su
        self.ch = ch
        self.sch = sch
    def factory(*args_, **kwargs_):
        if sub.subclass:
            return sub.subclass(*args_, **kwargs_)
        else:
            return sub(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_enc(self): return self.enc
    def set_enc(self, enc): self.enc = enc
    def get_exc(self): return self.exc
    def set_exc(self, exc): self.exc = exc
    def get_nu(self): return self.nu
    def set_nu(self, nu): self.nu = nu
    def get_gpi(self): return self.gpi
    def set_gpi(self, gpi): self.gpi = gpi
    def get_nfu(self): return self.nfu
    def set_nfu(self, nfu): self.nfu = nfu
    def get_bn(self): return self.bn
    def set_bn(self, bn): self.bn = bn
    def get_rl(self): return self.rl
    def set_rl(self, rl): self.rl = rl
    def get_psn(self): return self.psn
    def set_psn(self, psn): self.psn = psn
    def get_pn(self): return self.pn
    def set_pn(self, pn): self.pn = pn
    def get_nsp(self): return self.nsp
    def set_nsp(self, nsp): self.nsp = nsp
    def get_ln(self): return self.ln
    def set_ln(self, ln): self.ln = ln
    def get_nct(self): return self.nct
    def set_nct(self, nct): self.nct = nct
    def get_nec(self): return self.nec
    def set_nec(self, nec): self.nec = nec
    def get_cr(self): return self.cr
    def set_cr(self, cr): self.cr = cr
    def get_su(self): return self.su
    def set_su(self, su): self.su = su
    def get_ch(self): return self.ch
    def set_ch(self, ch): self.ch = ch
    def get_sch(self): return self.sch
    def set_sch(self, sch): self.sch = sch
    def hasContent_(self):
        if (
            self.enc is not None or
            self.exc is not None or
            self.nu is not None or
            self.gpi is not None or
            self.nfu is not None or
            self.bn is not None or
            self.rl is not None or
            self.psn is not None or
            self.pn is not None or
            self.nsp is not None or
            self.ln is not None or
            self.nct is not None or
            self.nec is not None or
            self.cr is not None or
            self.su is not None or
            self.ch is not None or
            self.sch is not None
        ):
            return True
        else:
            return False


    def to_JSON(self):
        self.payload = {"m2m:sub":{k: v for k, v in self.__dict__.iteritems() if v is not None}}
        return json.dumps(self, default=lambda o: o.payload,
            sort_keys=True, indent=4)



    def export(self, outfile, level, namespace_='m2m:', name_='sub', namespacedef_='xmlns:m2m="http://www.onem2m.org/xml/protocols"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sub')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='m2m:', name_='sub', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='m2m:', name_='sub'):
        pass
    def exportChildren(self, outfile, level, namespace_='m2m:', name_='sub', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.enc is not None:
            self.enc.export(outfile, level, namespace_, name_='enc', pretty_print=pretty_print)
        if self.exc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexc>%s</%sexc>%s' % (namespace_, self.gds_format_integer(self.exc, input_name='exc'), namespace_, eol_))
        if self.nu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snu>%s</%snu>%s' % (namespace_, self.gds_format_string(quote_xml(self.nu).encode(ExternalEncoding), input_name='nu'), namespace_, eol_))
        if self.gpi is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgpi>%s</%sgpi>%s' % (namespace_, self.gds_format_string(quote_xml(self.gpi).encode(ExternalEncoding), input_name='gpi'), namespace_, eol_))
        if self.nfu is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snfu>%s</%snfu>%s' % (namespace_, self.gds_format_string(quote_xml(self.nfu).encode(ExternalEncoding), input_name='nfu'), namespace_, eol_))
        if self.bn is not None:
            self.bn.export(outfile, level, namespace_, name_='bn', pretty_print=pretty_print)
        if self.rl is not None:
            self.rl.export(outfile, level, namespace_, name_='rl', pretty_print=pretty_print)
        if self.psn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spsn>%s</%spsn>%s' % (namespace_, self.gds_format_integer(self.psn, input_name='psn'), namespace_, eol_))
        if self.pn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spn>%s</%spn>%s' % (namespace_, self.gds_format_string(quote_xml(self.pn).encode(ExternalEncoding), input_name='pn'), namespace_, eol_))
        if self.nsp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snsp>%s</%snsp>%s' % (namespace_, self.gds_format_integer(self.nsp, input_name='nsp'), namespace_, eol_))
        if self.ln is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sln>%s</%sln>%s' % (namespace_, self.gds_format_boolean(self.ln, input_name='ln'), namespace_, eol_))
        if self.nct is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snct>%s</%snct>%s' % (namespace_, self.gds_format_string(quote_xml(self.nct).encode(ExternalEncoding), input_name='nct'), namespace_, eol_))
        if self.nec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snec>%s</%snec>%s' % (namespace_, self.gds_format_string(quote_xml(self.nec).encode(ExternalEncoding), input_name='nec'), namespace_, eol_))
        if self.cr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scr>%s</%scr>%s' % (namespace_, self.gds_format_string(quote_xml(self.cr).encode(ExternalEncoding), input_name='cr'), namespace_, eol_))
        if self.su is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssu>%s</%ssu>%s' % (namespace_, self.gds_format_string(quote_xml(self.su).encode(ExternalEncoding), input_name='su'), namespace_, eol_))
        if self.ch is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sch>%s</%sch>%s' % (namespace_, self.gds_format_string(quote_xml(self.ch).encode(ExternalEncoding), input_name='ch'), namespace_, eol_))
        if self.sch is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssch>%s</%ssch>%s' % (namespace_, self.gds_format_string(quote_xml(self.sch).encode(ExternalEncoding), input_name='sch'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'enc':
            obj_ = eventNotificationCriteria.factory()
            obj_.build(child_)
            self.enc = obj_
            obj_.original_tagname_ = 'enc'
        elif nodeName_ == 'exc':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'exc')
            self.exc = ival_
        elif nodeName_ == 'nu':
            nu_ = child_.text
            nu_ = self.gds_validate_string(nu_, node, 'nu')
            self.nu = nu_
        elif nodeName_ == 'gpi':
            gpi_ = child_.text
            gpi_ = self.gds_validate_string(gpi_, node, 'gpi')
            self.gpi = gpi_
        elif nodeName_ == 'nfu':
            nfu_ = child_.text
            nfu_ = self.gds_validate_string(nfu_, node, 'nfu')
            self.nfu = nfu_
        elif nodeName_ == 'bn':
            obj_ = batchNotify.factory()
            obj_.build(child_)
            self.bn = obj_
            obj_.original_tagname_ = 'bn'
        elif nodeName_ == 'rl':
            obj_ = rateLimit.factory()
            obj_.build(child_)
            self.rl = obj_
            obj_.original_tagname_ = 'rl'
        elif nodeName_ == 'psn':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'psn')
            self.psn = ival_
        elif nodeName_ == 'pn':
            pn_ = child_.text
            pn_ = self.gds_validate_string(pn_, node, 'pn')
            self.pn = pn_
        elif nodeName_ == 'nsp':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'nsp')
            self.nsp = ival_
        elif nodeName_ == 'ln':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ln')
            self.ln = ival_
        elif nodeName_ == 'nct':
            nct_ = child_.text
            nct_ = self.gds_validate_string(nct_, node, 'nct')
            self.nct = nct_
        elif nodeName_ == 'nec':
            nec_ = child_.text
            nec_ = self.gds_validate_string(nec_, node, 'nec')
            self.nec = nec_
        elif nodeName_ == 'cr':
            cr_ = child_.text
            cr_ = self.gds_validate_string(cr_, node, 'cr')
            self.cr = cr_
        elif nodeName_ == 'su':
            su_ = child_.text
            su_ = self.gds_validate_string(su_, node, 'su')
            self.su = su_
        elif nodeName_ == 'ch':
            ch_ = child_.text
            ch_ = self.gds_validate_string(ch_, node, 'ch')
            self.ch = ch_
        elif nodeName_ == 'sch':
            sch_ = child_.text
            sch_ = self.gds_validate_string(sch_, node, 'sch')
            self.sch = sch_
        super(sub, self).buildChildren(child_, node, nodeName_, True)
# end class sub


class eventNotificationCriteria(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, crb=None, cra=None, ms=None, us=None, sts=None, stb=None, exb=None, exa=None, sza=None, szb=None, om=None, atr=None, net=None):
        self.original_tagname_ = None
        self.crb = crb
        self.cra = cra
        self.ms = ms
        self.us = us
        self.sts = sts
        self.stb = stb
        self.exb = exb
        self.exa = exa
        self.sza = sza
        self.szb = szb
        if om is None:
            self.om = []
        else:
            self.om = om
        if atr is None:
            self.atr = []
        else:
            self.atr = atr
        if net is None:
            self.net = []
        else:
            self.net = net
    def factory(*args_, **kwargs_):
        if eventNotificationCriteria.subclass:
            return eventNotificationCriteria.subclass(*args_, **kwargs_)
        else:
            return eventNotificationCriteria(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_crb(self): return self.crb
    def set_crb(self, crb): self.crb = crb
    def get_cra(self): return self.cra
    def set_cra(self, cra): self.cra = cra
    def get_ms(self): return self.ms
    def set_ms(self, ms): self.ms = ms
    def get_us(self): return self.us
    def set_us(self, us): self.us = us
    def get_sts(self): return self.sts
    def set_sts(self, sts): self.sts = sts
    def get_stb(self): return self.stb
    def set_stb(self, stb): self.stb = stb
    def get_exb(self): return self.exb
    def set_exb(self, exb): self.exb = exb
    def get_exa(self): return self.exa
    def set_exa(self, exa): self.exa = exa
    def get_sza(self): return self.sza
    def set_sza(self, sza): self.sza = sza
    def get_szb(self): return self.szb
    def set_szb(self, szb): self.szb = szb
    def get_om(self): return self.om
    def set_om(self, om): self.om = om
    def add_om(self, value): self.om.append(value)
    def insert_om_at(self, index, value): self.om.insert(index, value)
    def replace_om_at(self, index, value): self.om[index] = value
    def get_atr(self): return self.atr
    def set_atr(self, atr): self.atr = atr
    def add_atr(self, value): self.atr.append(value)
    def insert_atr_at(self, index, value): self.atr.insert(index, value)
    def replace_atr_at(self, index, value): self.atr[index] = value
    def get_net(self): return self.net
    def set_net(self, net): self.net = net
    def add_net(self, value): self.net.append(value)
    def insert_net_at(self, index, value): self.net.insert(index, value)
    def replace_net_at(self, index, value): self.net[index] = value
    def hasContent_(self):
        if (
            self.crb is not None or
            self.cra is not None or
            self.ms is not None or
            self.us is not None or
            self.sts is not None or
            self.stb is not None or
            self.exb is not None or
            self.exa is not None or
            self.sza is not None or
            self.szb is not None or
            self.om or
            self.atr or
            self.net
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='m2m:', name_='eventNotificationCriteria', namespacedef_='xmlns:m2m="http://www.onem2m.org/xml/protocols"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='eventNotificationCriteria')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='m2m:', name_='eventNotificationCriteria', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='m2m:', name_='eventNotificationCriteria'):
        pass
    def exportChildren(self, outfile, level, namespace_='m2m:', name_='eventNotificationCriteria', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.crb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scrb>%s</%scrb>%s' % (namespace_, self.gds_format_string(quote_xml(self.crb).encode(ExternalEncoding), input_name='crb'), namespace_, eol_))
        if self.cra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scra>%s</%scra>%s' % (namespace_, self.gds_format_string(quote_xml(self.cra).encode(ExternalEncoding), input_name='cra'), namespace_, eol_))
        if self.ms is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sms>%s</%sms>%s' % (namespace_, self.gds_format_string(quote_xml(self.ms).encode(ExternalEncoding), input_name='ms'), namespace_, eol_))
        if self.us is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sus>%s</%sus>%s' % (namespace_, self.gds_format_string(quote_xml(self.us).encode(ExternalEncoding), input_name='us'), namespace_, eol_))
        if self.sts is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssts>%s</%ssts>%s' % (namespace_, self.gds_format_integer(self.sts, input_name='sts'), namespace_, eol_))
        if self.stb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstb>%s</%sstb>%s' % (namespace_, self.gds_format_integer(self.stb, input_name='stb'), namespace_, eol_))
        if self.exb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexb>%s</%sexb>%s' % (namespace_, self.gds_format_string(quote_xml(self.exb).encode(ExternalEncoding), input_name='exb'), namespace_, eol_))
        if self.exa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexa>%s</%sexa>%s' % (namespace_, self.gds_format_string(quote_xml(self.exa).encode(ExternalEncoding), input_name='exa'), namespace_, eol_))
        if self.sza is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssza>%s</%ssza>%s' % (namespace_, self.gds_format_integer(self.sza, input_name='sza'), namespace_, eol_))
        if self.szb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sszb>%s</%sszb>%s' % (namespace_, self.gds_format_integer(self.szb, input_name='szb'), namespace_, eol_))
        for om_ in self.om:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%som>%s</%som>%s' % (namespace_, self.gds_format_string(quote_xml(om_).encode(ExternalEncoding), input_name='om'), namespace_, eol_))
        for atr_ in self.atr:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%satr>%s</%satr>%s' % (namespace_, self.gds_format_string(quote_xml(atr_).encode(ExternalEncoding), input_name='atr'), namespace_, eol_))
        for net_ in self.net:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snet>%s</%snet>%s' % (namespace_, self.gds_format_string(quote_xml(net_).encode(ExternalEncoding), input_name='net'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'crb':
            crb_ = child_.text
            crb_ = self.gds_validate_string(crb_, node, 'crb')
            self.crb = crb_
        elif nodeName_ == 'cra':
            cra_ = child_.text
            cra_ = self.gds_validate_string(cra_, node, 'cra')
            self.cra = cra_
        elif nodeName_ == 'ms':
            ms_ = child_.text
            ms_ = self.gds_validate_string(ms_, node, 'ms')
            self.ms = ms_
        elif nodeName_ == 'us':
            us_ = child_.text
            us_ = self.gds_validate_string(us_, node, 'us')
            self.us = us_
        elif nodeName_ == 'sts':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'sts')
            self.sts = ival_
        elif nodeName_ == 'stb':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'stb')
            self.stb = ival_
        elif nodeName_ == 'exb':
            exb_ = child_.text
            exb_ = self.gds_validate_string(exb_, node, 'exb')
            self.exb = exb_
        elif nodeName_ == 'exa':
            exa_ = child_.text
            exa_ = self.gds_validate_string(exa_, node, 'exa')
            self.exa = exa_
        elif nodeName_ == 'sza':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'sza')
            self.sza = ival_
        elif nodeName_ == 'szb':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'szb')
            self.szb = ival_
        elif nodeName_ == 'om':
            om_ = child_.text
            om_ = self.gds_validate_string(om_, node, 'om')
            self.om.append(om_)
        elif nodeName_ == 'atr':
            atr_ = child_.text
            atr_ = self.gds_validate_string(atr_, node, 'atr')
            self.atr.append(atr_)
        elif nodeName_ == 'net':
            net_ = child_.text
            net_ = self.gds_validate_string(net_, node, 'net')
            self.net.append(net_)
# end class eventNotificationCriteria


class batchNotify(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, num=None, dur=None):
        self.original_tagname_ = None
        self.num = num
        self.dur = dur
    def factory(*args_, **kwargs_):
        if batchNotify.subclass:
            return batchNotify.subclass(*args_, **kwargs_)
        else:
            return batchNotify(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_num(self): return self.num
    def set_num(self, num): self.num = num
    def get_dur(self): return self.dur
    def set_dur(self, dur): self.dur = dur
    def hasContent_(self):
        if (
            self.num is not None or
            self.dur is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='m2m:', name_='batchNotify', namespacedef_='xmlns:m2m="http://www.onem2m.org/xml/protocols"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='batchNotify')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='m2m:', name_='batchNotify', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='m2m:', name_='batchNotify'):
        pass
    def exportChildren(self, outfile, level, namespace_='m2m:', name_='batchNotify', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.num is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snum>%s</%snum>%s' % (namespace_, self.gds_format_integer(self.num, input_name='num'), namespace_, eol_))
        if self.dur is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdur>%s</%sdur>%s' % (namespace_, self.gds_format_string(quote_xml(self.dur).encode(ExternalEncoding), input_name='dur'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'num':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'num')
            self.num = ival_
        elif nodeName_ == 'dur':
            dur_ = child_.text
            dur_ = self.gds_validate_string(dur_, node, 'dur')
            self.dur = dur_
# end class batchNotify


class rateLimit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mnn=None, tww=None):
        self.original_tagname_ = None
        self.mnn = mnn
        self.tww = tww
    def factory(*args_, **kwargs_):
        if rateLimit.subclass:
            return rateLimit.subclass(*args_, **kwargs_)
        else:
            return rateLimit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mnn(self): return self.mnn
    def set_mnn(self, mnn): self.mnn = mnn
    def get_tww(self): return self.tww
    def set_tww(self, tww): self.tww = tww
    def hasContent_(self):
        if (
            self.mnn is not None or
            self.tww is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='m2m:', name_='rateLimit', namespacedef_='xmlns:m2m="http://www.onem2m.org/xml/protocols"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rateLimit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='m2m:', name_='rateLimit', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='m2m:', name_='rateLimit'):
        pass
    def exportChildren(self, outfile, level, namespace_='m2m:', name_='rateLimit', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mnn is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smnn>%s</%smnn>%s' % (namespace_, self.gds_format_integer(self.mnn, input_name='mnn'), namespace_, eol_))
        if self.tww is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stww>%s</%stww>%s' % (namespace_, self.gds_format_string(quote_xml(self.tww).encode(ExternalEncoding), input_name='tww'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mnn':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'mnn')
            self.mnn = ival_
        elif nodeName_ == 'tww':
            tww_ = child_.text
            tww_ = self.gds_validate_string(tww_, node, 'tww')
            self.tww = tww_
# end class rateLimit


GDSClassesMapping = {
    'rl': rateLimit,
    'bn': batchNotify,
    'enc': eventNotificationCriteria,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sub'
        rootClass = sub
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:m2m="http://www.onem2m.org/xml/protocols"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sub'
        rootClass = sub
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sub'
        rootClass = sub
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:m2m="http://www.onem2m.org/xml/protocols"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'sub'
        rootClass = sub
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from subscription import *\n\n')
        sys.stdout.write('import subscription as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "batchNotify",
    "eventNotificationCriteria",
    "rateLimit",
    "sub"
]
